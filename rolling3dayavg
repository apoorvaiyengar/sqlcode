/* final value shows the rolling 3-day average for January 31st which 
calculates the rolling average for totals for Jan 29th, 30th and 31st
*/

-- subquery to calculate daily total transaction amounts
SELECT 
  current_day.transaction_date,            
  current_day.daily_total,                 
  ROUND(AVG(past_day.daily_total), 2) AS total_rolling_3_day_avg  -- 3-day rolling average (rounded to 2 decimal places)
FROM (
  -- subquery to compute the total amount per day (this is "current day" reference)
  SELECT DATE(transaction_time) AS transaction_date,
         SUM(transaction_amount::numeric) AS daily_total
  FROM transactions
  GROUP BY DATE(transaction_time)
) current_day

-- Join the same subquery again to get totals for the 3-day range ending on the current date
JOIN (
  -- This is identical to the first subquery; it serves as the "past days" window to average
  SELECT DATE(transaction_time) AS transaction_date,
         SUM(transaction_amount::numeric) AS daily_total
  FROM transactions
  GROUP BY DATE(transaction_time)
) past_day
  
  ON past_day.transaction_date BETWEEN current_day.transaction_date - INTERVAL '2 day'
                                 AND current_day.transaction_date
-- Match the past days that fall within the 3-day window ending on the current day 
-- which is to calculate the rolling average only for Jan 31st 
WHERE current_day.transaction_date = '2021-01-31'

-- Group by current day so AVG() works properly
GROUP BY current_day.transaction_date, current_day.daily_total;
